// Auto-generated by @oats/gen - DO NOT EDIT
// Generated: 2025-08-17T03:55:10.128Z
// API Version: 1.0.0

import { z } from 'zod';

export const CreatePostSchema = z.object({
  title: z.string().max(200),
  content: z.string(),
  author: z.number().int(),
  published: z.boolean().optional(),
});

export const PaginatedPostListSchema = z.object({
  count: z.number().int(),
  next: z.string().url().optional(),
  previous: z.string().url().optional(),
  results: z.array(
    z.object({
      id: z.number().int(),
      title: z.string().max(200),
      content: z.string(),
      author: z.number().int(),
      author_name: z.string(),
      published: z.boolean().optional(),
      created_at: z.string().datetime(),
      updated_at: z.string().datetime(),
    }),
  ),
});

export const PaginatedUserListSchema = z.object({
  count: z.number().int(),
  next: z.string().url().optional(),
  previous: z.string().url().optional(),
  results: z.array(
    z.object({
      id: z.number().int(),
      email: z.string().email().max(254),
      first_name: z.string().max(50),
      last_name: z.string().max(50),
      is_active: z.boolean().optional(),
      created_at: z.string().datetime(),
      updated_at: z.string().datetime(),
    }),
  ),
});

export const PatchedPostSchema = z.object({
  id: z.number().int().optional(),
  title: z.string().max(200).optional(),
  content: z.string().optional(),
  author: z.number().int().optional(),
  author_name: z.string().optional(),
  published: z.boolean().optional(),
  created_at: z.string().datetime().optional(),
  updated_at: z.string().datetime().optional(),
});

export const PatchedUserSchema = z.object({
  id: z.number().int().optional(),
  email: z.string().email().max(254).optional(),
  first_name: z.string().max(50).optional(),
  last_name: z.string().max(50).optional(),
  is_active: z.boolean().optional(),
  created_at: z.string().datetime().optional(),
  updated_at: z.string().datetime().optional(),
});

export const PostSchema = z.object({
  id: z.number().int(),
  title: z.string().max(200),
  content: z.string(),
  author: z.number().int(),
  author_name: z.string(),
  published: z.boolean().optional(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
});

export const UserSchema = z.object({
  id: z.number().int(),
  email: z.string().email().max(254),
  first_name: z.string().max(50),
  last_name: z.string().max(50),
  is_active: z.boolean().optional(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
});

// Runtime validators
export const validateCreatePost = (data: unknown): z.infer<typeof CreatePostSchema> => {
  return CreatePostSchema.parse(data);
};

export const validatePaginatedPostList = (
  data: unknown,
): z.infer<typeof PaginatedPostListSchema> => {
  return PaginatedPostListSchema.parse(data);
};

export const validatePaginatedUserList = (
  data: unknown,
): z.infer<typeof PaginatedUserListSchema> => {
  return PaginatedUserListSchema.parse(data);
};

export const validatePatchedPost = (data: unknown): z.infer<typeof PatchedPostSchema> => {
  return PatchedPostSchema.parse(data);
};

export const validatePatchedUser = (data: unknown): z.infer<typeof PatchedUserSchema> => {
  return PatchedUserSchema.parse(data);
};

export const validatePost = (data: unknown): z.infer<typeof PostSchema> => {
  return PostSchema.parse(data);
};

export const validateUser = (data: unknown): z.infer<typeof UserSchema> => {
  return UserSchema.parse(data);
};

// Safe validators (return Result type)
export const safeParseCreatePost = (data: unknown) => {
  return CreatePostSchema.safeParse(data);
};

export const safeParsePaginatedPostList = (data: unknown) => {
  return PaginatedPostListSchema.safeParse(data);
};

export const safeParsePaginatedUserList = (data: unknown) => {
  return PaginatedUserListSchema.safeParse(data);
};

export const safeParsePatchedPost = (data: unknown) => {
  return PatchedPostSchema.safeParse(data);
};

export const safeParsePatchedUser = (data: unknown) => {
  return PatchedUserSchema.safeParse(data);
};

export const safeParsePost = (data: unknown) => {
  return PostSchema.safeParse(data);
};

export const safeParseUser = (data: unknown) => {
  return UserSchema.safeParse(data);
};

// Type exports
export type CreatePost = z.infer<typeof CreatePostSchema>;
export type PaginatedPostList = z.infer<typeof PaginatedPostListSchema>;
export type PaginatedUserList = z.infer<typeof PaginatedUserListSchema>;
export type PatchedPost = z.infer<typeof PatchedPostSchema>;
export type PatchedUser = z.infer<typeof PatchedUserSchema>;
export type Post = z.infer<typeof PostSchema>;
export type User = z.infer<typeof UserSchema>;
